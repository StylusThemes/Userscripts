// ==UserScript==
// @author       Journey Over
// @exclude      *
// ==UserLibrary==
// @name         @journeyover/dmm-add-quality-buttons
// @description  Adds quality buttons on DMM
// @license      MIT
// @version      1.0.0
// @homepageURL  https://github.com/StylusThemes/Userscripts
// ==/UserScript==

(function(){"use strict";const QUALITY_TOKENS=[{key:"720p",name:"720p",values:["720p"]},{key:"1080p",name:"1080p",values:["1080p"]},{key:"4k",name:"4k",values:["\\b4k\\b","2160p"]},{key:"dv",name:"Dolby Vision",values:["dovi","\\bdv\\b","dolby","vision"]},{key:"x264",name:"x264",values:["264"]},{key:"x265",name:"x265",values:["265","\\bHEVC\\b"]},{key:"hdr",name:"HDR",values:["hdr"]},{key:"remux",name:"Remux",values:["remux"]},{key:"atmos",name:"Atmos",values:["atmos"]}];const STORAGE_KEY="dmm-tg-quality-options";const POLARITY_STORAGE_KEY="dmm-tg-quality-polarity";const LOGIC_STORAGE_KEY="dmm-tg-logic-mode";const allQualityValues=QUALITY_TOKENS.flatMap(token=>token.values);const removeQualityFromRegex=regex=>{if(!regex||typeof regex!=="string")return"";let cleaned=regex;const andMatch=cleaned.match(/\^(\(\?[\=!].*?\))+\.\*/);if(andMatch&&andMatch.index===0){const matched=andMatch[0];const hasQuality=allQualityValues.some(q=>matched.includes(q));if(hasQuality){cleaned=cleaned.replace(matched,"")}}const orMatch=cleaned.match(/\|\([^)]+\)$/);if(orMatch){const matched=orMatch[0];const hasQuality=allQualityValues.some(q=>matched.includes(q));if(hasQuality){cleaned=cleaned.replace(matched,"")}}if(cleaned.match(/^\([^)]+\)$/)||cleaned.match(/^\(\?[\=!].*?\)$/)){const hasQuality=allQualityValues.some(q=>cleaned.includes(q));if(hasQuality){cleaned=""}}return cleaned.trim()};const buildQualityString=(selectedOptions,useAndLogic=false,qualityPolarity=new Map)=>{if(!selectedOptions.length)return"";const tokenValues=[];selectedOptions.forEach(optionKey=>{const token=QUALITY_TOKENS.find(q=>q.key===optionKey);if(token&&token.values)tokenValues.push(token.values)});if(!tokenValues.length)return"";if(useAndLogic){const lookaheads=selectedOptions.map((optionKey,index)=>{const vals=tokenValues[index];const isPositive=qualityPolarity.get(optionKey)!==false;const lookaheadType=isPositive?"=":"!";if(vals.length===1){return`(?${lookaheadType}.*${vals[0]})`}return`(?${lookaheadType}.*(?:${vals.join("|")}))`}).join("");return lookaheads}else{const flat=tokenValues.flat();return`(${flat.join("|")})`}};const injectQualityStyles=prefix=>{const css=`\n      .${prefix}-quality-section{display:flex;align-items:center;gap:.75rem;margin-left:.75rem;padding-left:.75rem;border-left:1px solid rgba(148,163,184,.15);}\n      .${prefix}-quality-grid{display:flex;flex-wrap:wrap;gap:.6rem;}\n      .${prefix}-quality-item{display:inline-flex;align-items:center;font-size:12px;}\n      .${prefix}-quality-button{padding:.25rem .5rem;border-radius:.375rem;border:1px solid rgba(148,163,184,.15);background:transparent;color:#e6f0ff;cursor:pointer;font-size:12px;line-height:1}\n      .${prefix}-quality-button.active{background:#3b82f6;color:#fff;border-color:#3b82f6}\n      .${prefix}-quality-button.active.negative{background:#dc2626;color:#fff;border-color:#dc2626}\n      .${prefix}-quality-button:focus{outline:1px solid rgba(59,130,246,.5);}\n      .${prefix}-quality-label{color:#e6f0ff;cursor:pointer;white-space:nowrap;}\n      .${prefix}-logic-selector{margin-right:.75rem;padding-right:.75rem;border-right:1px solid rgba(148,163,184,.15);display:flex;align-items:center;}\n      .${prefix}-logic-toggle{display:inline-flex;border:1px solid rgba(148,163,184,.4);border-radius:.375rem;overflow:hidden;}\n      .${prefix}-logic-option{background:#1f2937;color:#e6f0ff;border:none;padding:.25rem .5rem;font-size:12px;cursor:pointer;transition:all 0.2s ease;line-height:1;display:flex;align-items:center;position:relative;}\n      .${prefix}-logic-option:hover{background:#374151;}\n      .${prefix}-logic-option.active{background:#3b82f6;color:#fff;border-left:1px solid #3b82f6;border-right:1px solid #3b82f6;margin-left:-1px;margin-right:-1px;z-index:1;}\n      .${prefix}-logic-option:focus{outline:1px solid rgba(59,130,246,.5);}\n      .${prefix}-help-icon{background:#1f2937;color:#e6f0ff;border:1px solid rgba(148,163,184,.4);border-radius:50%;width:16px;height:16px;font-size:11px;cursor:help;margin-left:.25rem;display:inline-flex;align-items:center;justify-content:center;font-weight:bold;}\n      .${prefix}-help-icon:hover{background:#374151;}\n    `;const style=document.createElement("style");style.textContent=css;document.head.appendChild(style)};class QualityManager{constructor(config){this.config=config;this.selectedOptions=[];this.qualityPolarity=new Map;this.useAndLogic=false;this.container=null;this.buttons=new Map;this.logicSelect=null}async initialize(container){this.container=container;injectQualityStyles(this.config.CSS_CLASS_PREFIX);this.createQualitySection();await this.loadPersistedSettings();this.restoreStates();if(this.selectedOptions.length>0){setTimeout(()=>this.updateInputWithQualityOptions(),50)}}async loadPersistedSettings(){try{const stored=await GMC.getValue(STORAGE_KEY,null);this.selectedOptions=stored?JSON.parse(stored):[];const polarityStored=await GMC.getValue(POLARITY_STORAGE_KEY,null);const polarityData=polarityStored?JSON.parse(polarityStored):{};this.qualityPolarity=new Map(Object.entries(polarityData));const logicStored=await GMC.getValue(LOGIC_STORAGE_KEY,null);this.useAndLogic=logicStored?JSON.parse(logicStored):false}catch(err){console.error("dmm-tg: failed to load quality options",err);this.selectedOptions=[];this.qualityPolarity=new Map;this.useAndLogic=false}}createQualitySection(){if(!this.container)return;const existing=this.container.querySelector(`.${this.config.CSS_CLASS_PREFIX}-quality-section`);if(existing)existing.remove();const section=document.createElement("div");section.className=`${this.config.CSS_CLASS_PREFIX}-quality-section`;const logicSelector=document.createElement("div");logicSelector.className=`${this.config.CSS_CLASS_PREFIX}-logic-selector`;const logicSelect=document.createElement("div");logicSelect.className=`${this.config.CSS_CLASS_PREFIX}-logic-toggle`;logicSelect.setAttribute("tabindex","0");logicSelect.innerHTML=`\n        <button type="button" class="${this.config.CSS_CLASS_PREFIX}-logic-option active" data-mode="or">OR</button>\n        <button type="button" class="${this.config.CSS_CLASS_PREFIX}-logic-option" data-mode="and">AND</button>\n      `;logicSelect.addEventListener("click",e=>this.onLogicToggle(e));const helpIcon=document.createElement("button");helpIcon.type="button";helpIcon.className=`${this.config.CSS_CLASS_PREFIX}-help-icon`;helpIcon.textContent="?";helpIcon.title=`Logic Modes:\n\nOR Mode: Match ANY selected quality\nExample: (720p|1080p) - matches files with 720p OR 1080p\n\nAND Mode: Match ALL selected qualities (advanced filtering)\n- Requires EVERY selected quality to be present in the filename\n- Useful for precise filtering, e.g., only 1080p remux files\nExample: (?=.*1080p)(?=.*remux) - matches files with BOTH 1080p AND remux\n\nNegative Matching in AND Mode:\n- Click a quality button twice to exclude it\n- Creates a negative lookahead: (?!.*quality)\nExample: (?=.*1080p)(?!.*720p) - requires 1080p but excludes 720p\n\nTip: AND mode is powerful for complex filters but may match fewer files`;logicSelector.appendChild(logicSelect);logicSelector.appendChild(helpIcon);this.logicSelect=logicSelect;const grid=document.createElement("div");grid.className=`${this.config.CSS_CLASS_PREFIX}-quality-grid`;QUALITY_TOKENS.forEach(token=>{const item=document.createElement("div");item.className=`${this.config.CSS_CLASS_PREFIX}-quality-item`;const btn=document.createElement("button");btn.type="button";btn.className=`${this.config.CSS_CLASS_PREFIX}-quality-button`;btn.id=`${this.config.CSS_CLASS_PREFIX}-${token.key}`;btn.textContent=token.name;btn.addEventListener("click",()=>this.onToggleOption(token.key,btn));item.appendChild(btn);grid.appendChild(item);this.buttons.set(token.key,btn)});section.appendChild(logicSelector);section.appendChild(grid);this.container.appendChild(section)}restoreStates(){this.selectedOptions.forEach(key=>{const btn=this.buttons.get(key);if(btn){btn.classList.add("active");if(this.useAndLogic){const isPositive=this.qualityPolarity.get(key)!==false;if(!isPositive){btn.classList.add("negative")}}}});if(this.logicSelect){const allOptions=this.logicSelect.querySelectorAll(`.${this.config.CSS_CLASS_PREFIX}-logic-option`);allOptions.forEach(option=>{option.classList.remove("active");if(option.dataset.mode==="and"&&this.useAndLogic||option.dataset.mode==="or"&&!this.useAndLogic){option.classList.add("active")}})}}onLogicToggle(e){e.preventDefault();e.stopPropagation();const target=e.target;if(!target.classList.contains(`${this.config.CSS_CLASS_PREFIX}-logic-option`))return;const mode=target.dataset.mode;const useAndLogic=mode==="and";const allOptions=this.logicSelect.querySelectorAll(`.${this.config.CSS_CLASS_PREFIX}-logic-option`);allOptions.forEach(option=>option.classList.remove("active"));target.classList.add("active");this.onLogicChange(useAndLogic)}onLogicChange(useAndLogic){const target=this.findTargetInput();if(target){const currentValue=target.value||"";const cleanedValue=removeQualityFromRegex(currentValue);setInputValueReactive(target,cleanedValue)}this.useAndLogic=useAndLogic;this.selectedOptions.forEach(key=>{const btn=this.buttons.get(key);if(btn){if(useAndLogic){const isPositive=this.qualityPolarity.get(key)!==false;if(!isPositive){btn.classList.add("negative")}}else{btn.classList.remove("negative")}}});try{GMC.setValue(LOGIC_STORAGE_KEY,JSON.stringify(this.useAndLogic))}catch(err){console.error("dmm-tg: failed to save logic mode",err)}this.updateInputWithQualityOptions()}onToggleOption(key,btn){const isActive=btn.classList.contains("active");const isNegative=btn.classList.contains("negative");if(!isActive&&!isNegative){btn.classList.add("active");if(!this.selectedOptions.includes(key))this.selectedOptions.push(key);if(this.useAndLogic){this.qualityPolarity.set(key,true)}}else if(isActive&&!isNegative){if(this.useAndLogic){btn.classList.add("negative");this.qualityPolarity.set(key,false)}else{btn.classList.remove("active");const idx=this.selectedOptions.indexOf(key);if(idx>-1)this.selectedOptions.splice(idx,1)}}else{btn.classList.remove("active");btn.classList.remove("negative");const idx=this.selectedOptions.indexOf(key);if(idx>-1)this.selectedOptions.splice(idx,1);this.qualityPolarity.delete(key)}try{GMC.setValue(STORAGE_KEY,JSON.stringify(this.selectedOptions));GMC.setValue(POLARITY_STORAGE_KEY,JSON.stringify(Object.fromEntries(this.qualityPolarity)))}catch(err){console.error("dmm-tg: failed to save quality options",err)}this.updateInputWithQualityOptions()}updateInputWithQualityOptions(){const target=this.findTargetInput();if(!target)return;const currentValue=target.value||"";const qualityString=buildQualityString(this.selectedOptions,this.useAndLogic,this.qualityPolarity);let newValue;if(qualityString){const cleanedBase=removeQualityFromRegex(currentValue);if(this.useAndLogic){newValue=cleanedBase?`^${qualityString}.*${cleanedBase}`:`^${qualityString}.*`}else{newValue=cleanedBase?`${cleanedBase}|${qualityString}`:qualityString}}else{newValue=removeQualityFromRegex(currentValue)}setInputValueReactive(target,newValue)}applyQualityOptionsToValue(baseValue){const qualityString=buildQualityString(this.selectedOptions,this.useAndLogic,this.qualityPolarity);if(!qualityString)return baseValue;const cleanedBase=removeQualityFromRegex(baseValue);if(this.useAndLogic){return cleanedBase?`^${qualityString}.*${cleanedBase}`:`^${qualityString}.*`}else{return cleanedBase?`${cleanedBase}|${qualityString}`:qualityString}}findTargetInput(){let target=qs("#query");if(target&&isVisible(target))return target;if(this.container){target=this.container.querySelector("input, textarea");if(target&&isVisible(target))return target}const candidates=qsa("input, textarea");target=candidates.find(isVisible)||null;return target}cleanup(){this.buttons.clear();this.qualityPolarity.clear();const existing=this.container?.querySelector(`.${this.config.CSS_CLASS_PREFIX}-quality-section`);if(existing)existing.remove()}}const qs=(sel,root=document)=>root.querySelector(sel);const qsa=(sel,root=document)=>Array.from(root.querySelectorAll(sel));const isVisible=el=>!!(el&&el.offsetParent!==null&&getComputedStyle(el).visibility!=="hidden");const getNativeValueSetter=el=>{const proto=el instanceof HTMLInputElement?HTMLInputElement.prototype:HTMLTextAreaElement.prototype;const desc=Object.getOwnPropertyDescriptor(proto,"value");return desc&&desc.set};const setInputValueReactive=(el,value)=>{const nativeSetter=getNativeValueSetter(el);if(nativeSetter){nativeSetter.call(el,value)}else{el.value=value}try{el.focus();if(typeof el.setSelectionRange==="function")el.setSelectionRange(value.length,value.length)}catch(err){}el.dispatchEvent(new Event("input",{bubbles:true}));el.dispatchEvent(new Event("change",{bubbles:true}));try{if(el._valueTracker&&typeof el._valueTracker.setValue==="function"){el._valueTracker.setValue(value)}}catch(err){}};window.DMMQualityManager={QualityManager:QualityManager,buildQualityString:buildQualityString,removeQualityFromRegex:removeQualityFromRegex,QUALITY_TOKENS:QUALITY_TOKENS,allQualityValues:allQualityValues,setInputValueReactive:setInputValueReactive,qs:qs,qsa:qsa,isVisible:isVisible}})();
