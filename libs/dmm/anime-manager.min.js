// ==UserScript==
// @author       Journey Over
// @exclude      *
// ==UserLibrary==
// @name         @journeyover/dmm-add-release.moe-link
// @description  Adds Release.moe links to anime pages on DMM
// @license      MIT
// @version      1.0.0
// @homepageURL  https://github.com/StylusThemes/Userscripts
// ==/UserLibrary==
// @connect      releases.moe
// @grant        GM.xmlHttpRequest
// ==/UserScript==

(function(){"use strict";const CACHE_DURATION=24*60*60*1e3;class AnimeManager{constructor(config){this.config=config;this.wikidata=new Wikidata;this.logger=Logger("DMM Anime Manager",{debug:false})}async isAnimePage(){try{const imdbLink=qs('a[href*="imdb.com/title/"]');if(!imdbLink){this.logger.debug("No IMDB link found on page");return{isAnime:false,anilistId:null,releasesExists:false}}const href=imdbLink.href;const match=href.match(/imdb\.com\/title\/(tt\d+)/);if(!match){this.logger.debug("Invalid IMDB URL format");return{isAnime:false,anilistId:null,releasesExists:false}}const imdbId=match[1];const cache=await GMC.getValue("cache")||{};const cacheKey=`dmm-anime-cache-${imdbId}`;const cached=cache[cacheKey];if(cached&&Date.now()-cached.timestamp<CACHE_DURATION){this.logger.debug(`Anime cache hit for ${imdbId} (${Math.round((Date.now()-cached.timestamp)/1e3)}s old)`);return cached.data}this.logger.debug(`Anime cache miss for ${imdbId}, fetching from APIs`);const url=location.href;const mediaType=url.includes("/movie/")?"movie":"tv";const data=await this.wikidata.links(imdbId,"IMDb",mediaType);const anilistLink=data.links?.AniList?.value;let result={isAnime:false,anilistId:null,releasesExists:false};if(anilistLink){const anilistMatch=anilistLink.match(/anilist\.co\/anime\/(\d+)/);const anilistId=anilistMatch?anilistMatch[1]:null;if(anilistId){const releasesExists=await this.checkReleasesMoeExists(anilistId);result={isAnime:true,anilistId:anilistId,releasesExists:releasesExists};this.logger(`Anime detected: ${imdbId} -> AniList ${anilistId}, Releases.moe: ${releasesExists?"available":"not available"}`)}else{result={isAnime:true,anilistId:null,releasesExists:false};this.logger.debug(`Anime detected: ${imdbId} but no AniList ID found`)}}else{this.logger.debug(`Non-anime content: ${imdbId} (no AniList link)`)}cache[cacheKey]={data:result,timestamp:Date.now()};const lastCleanup=await GMC.getValue("cache-last-cleanup")||0;const now=Date.now();if(now-lastCleanup>=CACHE_DURATION){let cleanedCount=0;for(const[key,entry]of Object.entries(cache)){if(key.startsWith("dmm-anime-cache-")&&now-entry.timestamp>CACHE_DURATION){delete cache[key];cleanedCount++}}await GMC.setValue("cache-last-cleanup",now);if(cleanedCount>0){this.logger.debug(`Cache cleanup: Removed ${cleanedCount} expired entries`)}}await GMC.setValue("cache",cache);return result}catch(error){this.logger.error(`Anime detection failed for ${location.href}:`,error);return{isAnime:false,anilistId:null,releasesExists:false}}}checkReleasesMoeExists(anilistId){return new Promise(resolve=>{const apiUrl=`https://releases.moe/api/collections/entries/records?filter=alID=${anilistId}`;GMC.xmlHttpRequest({method:"GET",url:apiUrl,onload:response=>{try{const data=JSON.parse(response.responseText);const exists=data.totalItems>0;this.logger.debug(`Releases.moe: Anime ${anilistId} ${exists?"found":"not found"}`);resolve(exists)}catch(error){this.logger.error(`Releases.moe API parse error for ${anilistId}:`,error);resolve(false)}},onerror:error=>{this.logger.error(`Releases.moe API request failed for ${anilistId}:`,error);resolve(false)}})})}createReleasesMoeButton(link){const existingButton=document.querySelector('a[href*="releases.moe"]');if(existingButton){return}this.logger.debug("Created Releases.moe button:",{link:link});const button=document.createElement("a");button.href=link;button.target="_blank";button.className="mb-1 mr-2 mt-0 rounded border-2 border-orange-500 bg-orange-900/30 px-2 py-1 text-sm text-orange-100 transition-colors hover:bg-orange-800/50";button.innerHTML="<b>Releases.moe</b>";const buttonContainer=qs(".grid > div:last-child");if(buttonContainer){buttonContainer.appendChild(button);this.logger.debug("Releases.moe button added to container")}else{this.logger.warn("Releases.moe button container not found")}}async detectAndSetup(){try{const{isAnime:isAnime,anilistId:anilistId,releasesExists:releasesExists}=await this.isAnimePage();if(isAnime&&anilistId&&releasesExists){this.logger("Anime detected with Releases.moe availability",{anilistId:anilistId,releasesExists:releasesExists});this.createReleasesMoeButton(`https://releases.moe/${anilistId}/`)}else if(isAnime&&anilistId&&!releasesExists){this.logger.debug("Anime detected but not available on Releases.moe",{anilistId:anilistId})}else if(isAnime&&!anilistId){this.logger.debug("Anime detected but no AniList ID found")}else{this.logger.debug("Non-anime content detected")}}catch(error){this.logger.error("Anime detection failed, continuing without anime features:",error)}}}const qs=(sel,root=document)=>root.querySelector(sel);window.DMMAnimeManager={AnimeManager:AnimeManager}})();
