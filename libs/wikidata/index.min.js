// ==UserScript==
// @author Journey Over
// @exclude *
// ==UserLibrary==
// @name @journeyover/wikidata
// @description Wikidata for my userscripts
// @license MIT
// @version 1.1.0
// @homepageURL https://github.com/StylusThemes/Userscripts
// ==/UserLibrary==
// @connect query.wikidata.org
// @connect arm.haglund.dev
// @grant GM.xmlHttpRequest
// ==/UserScript==

this.Wikidata=class{constructor(c={}){this._config={endpoint:c.endpoint||"https://query.wikidata.org",debug:c.debug||!1},this._headers={Accept:"application/sparql-results+json"},this._debug=r=>(this._config.debug||200!==r.status)&&console.log(`${r.status}: ${r.finalUrl}`),this._property=s=>{switch(s){case "IMDb":return"P345";case "TMDb_movie":return"P4947";case "TMDb_tv":return"P4983";case "TVDb_movie":return"P12196";case "TVDb_tv":return"P4835";case "Trakt":return"P8013";case "Rotten Tomatoes":return"P1258";case "Metacritic":return"P1712";case "Letterboxd":return"P6127";case "TVmaze":return"P8600";case "MyAnimeList":return"P4086";case "AniDB":return"P5646";case "AniList":return"P8729";case "Kitsu":return"P11495";case "AniSearch":return"P12477";case "LiveChart":return"P12489";default:throw new Error("An ID source is required")}},this._item=t=>{switch(t){case "movie":return"Q11424";case "tv":return"Q5398426";default:throw new Error("An ID type is required")}},this._link=(e,i)=>{switch(e){case "IMDb":return{value:`https://www.imdb.com/title/${i}`};case "TMDb_movie":return{value:`https://www.themoviedb.org/movie/${i}`};case "TMDb_tv":return{value:`https://www.themoviedb.org/tv/${i}`};case "TVDb_movie":return{value:`https://thetvdb.com/dereferrer/movie/${i}`};case "TVDb_tv":return{value:`https://thetvdb.com/dereferrer/series/${i}`};case "Trakt":return{value:`https://trakt.tv/${i}`};case "Rotten Tomatoes":return{value:`https://www.rottentomatoes.com/${i}`};case "Metacritic":return{value:`https://www.metacritic.com/${i}`};case "Letterboxd":return{value:`https://letterboxd.com/film/${i}`};case "TVmaze":return{value:`https://tvmaze.com/shows/${i}`};case "MyAnimeList":return{value:`https://myanimelist.net/anime/${i}`};case "AniDB":return{value:`https://anidb.net/anime/${i}`};case "AniList":return{value:`https://anilist.co/anime/${i}`};case "Kitsu":return{value:`https://kitsu.app/anime/${i}`};case "AniSearch":return{value:`https://www.anisearch.com/anime/${i}`};case "LiveChart":return{value:`https://www.livechart.me/anime/${i}`}}}}links(id,src,type){if(!id)throw new Error("An ID is required");const prop=this._property(src),itm=this._item(type),qry=` SELECT DISTINCT ?item ?itemLabel ?IMDb ?TMDb_movie ?TMDb_tv ?TVDb_movie ?TVDb_tv ?Trakt ?RottenTomatoes ?Metacritic ?Letterboxd ?TVmaze ?MyAnimeList ?AniDB ?AniList ?Kitsu ?AniSearch ?LiveChart WHERE { ?item p:${prop} ?statement0. ?statement0 ps:${prop} "${id}". ?item p:P31 ?statement1. ?statement1 (ps:P31/(wdt:P279*)) wd:${itm}. MINUS { ?item p:P31 ?statement2. ?statement2 (ps:P31/(wdt:P279*)) wd:Q3464665. } MINUS { ?item p:P31 ?statement3. ?statement3 (ps:P31/(wdt:P279*)) wd:Q21191270. } OPTIONAL { ?item wdt:P345 ?IMDb. } OPTIONAL { ?item wdt:P4947 ?TMDb_movie. } OPTIONAL { ?item wdt:P4983 ?TMDb_tv. } OPTIONAL { ?item wdt:P12196 ?TVDb_movie. } OPTIONAL { ?item wdt:P4835 ?TVDb_tv. } OPTIONAL { ?item wdt:P8013 ?Trakt. } OPTIONAL { ?item wdt:P1258 ?RottenTomatoes. } OPTIONAL { ?item wdt:P1712 ?Metacritic. } OPTIONAL { ?item wdt:P6127 ?Letterboxd. } OPTIONAL { ?item wdt:P8600 ?TVmaze. } OPTIONAL { ?item wdt:P4086 ?MyAnimeList. } OPTIONAL { ?item wdt:P5646 ?AniDB. } OPTIONAL { ?item wdt:P8729 ?AniList. } OPTIONAL { ?item wdt:P11495 ?Kitsu. } OPTIONAL { ?item wdt:P12477 ?AniSearch. } OPTIONAL { ?item wdt:P12489 ?LiveChart. } SERVICE wikibase:label { bd:serviceParam wikibase:language "en". } } LIMIT 1000 `,self=this;return new Promise((resolve,reject)=>{GM.xmlHttpRequest({method:"GET",url:`${this._config.endpoint}/sparql?query=${encodeURIComponent(qry)}`,headers:this._headers,timeout:15000,onload(resp){self._debug(resp);let res=JSON.parse(resp.responseText).results.bindings.find(x=>x[src].value===id);if(res&&Object.keys(res).length>0&&Object.getPrototypeOf(res)===Object.prototype){let data={title:res.itemLabel?res.itemLabel.value:void 0,links:{IMDB:res.IMDb?self._link("IMDb",res.IMDb.value):void 0,TMDB:(res.TMDb_movie||res.TMDb_tv)?(res.TMDb_movie?self._link("TMDb_movie",res.TMDb_movie.value):self._link("TMDb_tv",res.TMDb_tv.value)):void 0,TVDB:(res.TVDb_movie||res.TVDb_tv)?(res.TVDb_movie?self._link("TVDb_movie",res.TVDb_movie.value):self._link("TVDb_tv",res.TVDb_tv.value)):void 0,Trakt:res.Trakt?self._link("Trakt",res.Trakt.value):void 0,"Rotten Tomatoes":res.RottenTomatoes?self._link("Rotten Tomatoes",res.RottenTomatoes.value):void 0,Metacritic:res.Metacritic?self._link("Metacritic",res.Metacritic.value):void 0,Letterboxd:res.Letterboxd?self._link("Letterboxd",res.Letterboxd.value):void 0,TVmaze:res.TVmaze?self._link("TVmaze",res.TVmaze.value):void 0,MyAnimeList:res.MyAnimeList?self._link("MyAnimeList",res.MyAnimeList.value):void 0,AniDB:res.AniDB?self._link("AniDB",res.AniDB.value):void 0,AniList:res.AniList?self._link("AniList",res.AniList.value):void 0,Kitsu:res.Kitsu?self._link("Kitsu",res.Kitsu.value):void 0,AniSearch:res.AniSearch?self._link("AniSearch",res.AniSearch.value):void 0,LiveChart:res.LiveChart?self._link("LiveChart",res.LiveChart.value):void 0},item:res.item.value};if(!data.links.MyAnimeList||!data.links.AniDB||!data.links.AniList||!data.links.Kitsu||!data.links.AniSearch||!data.links.LiveChart){let extEP=null,extId=null;res.TMDb_movie? (extEP="themoviedb",extId=res.TMDb_movie.value):res.TMDb_tv? (extEP="themoviedb",extId=res.TMDb_tv.value):res.TVDb_movie? (extEP="thetvdb",extId=res.TVDb_movie.value):res.TVDb_tv&&(extEP="thetvdb",extId=res.TVDb_tv.value);if(extEP&&extId){GM.xmlHttpRequest({method:"GET",url:`https://arm.haglund.dev/api/v2/${extEP}?id=${extId}`,timeout:15000,onload(extResp){try{let extData=JSON.parse(extResp.responseText);if(Array.isArray(extData)&&extData.length>0){let extInfo=extData[0],map={themoviedb:"TMDB",thetvdb:"TVDB",myanimelist:"MyAnimeList",anidb:"AniDB",anilist:"AniList",kitsu:"Kitsu",anisearch:"AniSearch",livechart:"LiveChart"};Object.keys(map).forEach(k=>{let lk=map[k];!data.links[lk]&&extInfo[k]&&(data.links[lk]=k==="themoviedb"?self._link(type==="movie"?"TMDb_movie":"TMDb_tv",extInfo[k]):k==="thetvdb"?self._link(type==="movie"?"TVDb_movie":"TVDb_tv",extInfo[k]):self._link(lk,extInfo[k]))})}}catch(e){console.error("Error parsing external API response:",e)};resolve(data)},onerror:()=>resolve(data),ontimeout:()=>resolve(data)})}else resolve(data)}else resolve(data)}else reject(new Error("No results"))},onerror:()=>reject(new Error("An error occurs while processing the request")),ontimeout:()=>reject(new Error("Request times out"))})})}};
