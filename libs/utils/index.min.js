// ==UserScript==
// @author       Journey Over
// @exclude      *
// ==UserLibrary==
// @name         @journeyover/utils
// @description  Utils for my userscripts
// @license      MIT
// @version      1.0.0
// @homepageURL  https://github.com/StylusThemes/Userscripts
// ==/UserLibrary==
// @grant        GM.deleteValue
// @grant        GM.getValue
// @grant        GM.setValue
// ==/UserScript==

this.UserscriptUtils=(function(){class e{constructor(e={}){const{ name:t,author:n,version:r,color:o="red",logging:i=!1 }=e;if(!t)throw new Error("Userscript name is required");if(!n)throw new Error("Userscript author is required");const a=/^(.*?)\s<\S[^\s@]*@\S[^\s.]*\.\S+>$/.exec(n);this._config={name:t.toUpperCase(),version:r||void 0,author:a?.[1]||n,color:o,logging:i}}async init(e){const{ name:t,version:n,author:r,color:o,logging:i }=this._config,a=`%c${t}\n${n?`%cv${n} `:""}by ${r} is running!`;console.log(a,`color:${o};font-weight:bold;font-size:18px;`,"");if(e&&i){const n=JSON.parse(await GM.getValue(e));for(const[e,o]of Object.entries(n))console.log(`${t}:`,`${e} is "${o}"`)}}log(e){this._config.logging&&console.log(`${this._config.name}:`,e)}error(e){console.error(`${this._config.name}:`,e)}alert(e){window.alert(`${this._config.name}: ${e}`)}short(e,t){return e.split(" ").length>t?`${e.split(" ",t).join(" ")} [...]`:e}}return e.migrateConfig=async(e,t)=>{if(!e)throw new Error("An old config ID is required");if(!t)throw new Error("A new config ID is required");const n=await GM.getValue(e);n&&(await GM.setValue(t,n),await GM.deleteValue(e),window.location.reload(!1))},e})();
